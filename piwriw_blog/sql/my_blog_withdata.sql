/*
 Navicat Premium Data Transfer

 Source Server         : localhost_3306
 Source Server Type    : MySQL
 Source Server Version : 80013
 Source Host           : localhost:3306
 Source Schema         : my_blog

 Target Server Type    : MySQL
 Target Server Version : 80013
 File Encoding         : 65001

 Date: 01/03/2023 19:35:34
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for article
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `create_time` datetime(3) NULL DEFAULT NULL,
  `update_time` datetime(3) NULL DEFAULT NULL,
  `delete_time` datetime(3) NULL DEFAULT NULL,
  `title` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `cid` bigint(20) UNSIGNED NOT NULL,
  `desc` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `html_content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `img` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `comment_count` bigint(20) NOT NULL DEFAULT 0,
  `read_count` bigint(20) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_article_deleted_at`(`delete_time`) USING BTREE,
  INDEX `fk_article_category`(`cid`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 598 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES (1, '2021-01-04 22:47:34.425', '2021-01-04 22:47:34.425', NULL, '欢迎来到Ginblog', 1, '使用前请阅读', '<h1><a id=\"why_I_write_the_series_of_kubeedge_0\"></a>why I write the series of kubeedge</h1>\n<ul>\n<li>It base on an experience I had studying kubeege. What is more,I chose it as my graduation project.(ps： somethings from Kubeedge 云原生边缘计算公开课) When I stumbled upon this series of courses.</li>\n<li>Now let get it!</li>\n</ul>\n<h1><a id=\"Backgroud_of_Edge_calculation_3\"></a>Backgroud of Edge calculation</h1>\n<ul>\n<li>Famous words:&quot; <strong>The future is here and it is built on cloud native</strong> &quot; (未来就在这里，它建立在云原生之上)</li>\n<li>Edge Computing will be 4x larger than cloud and will generate 75% of data worldwide by 2025. With hardware and<br />\nsoftware spread across hundreds or thousands of locations, the only feasible way to manage these distributed systems<br />\nare the simple paradigms around observability, loosely coupled systems, declarative APIs, and robust automation, that have made cloud native technologies so successful in the cloud. Kubernetes is already becoming a key part of the edge ecosystem, driving integrations and operations</li>\n<li>到2025年，全世界75%的数据将会产生于边缘，边缘计算的规模将会比云大4倍。由于软硬件分散部署在成百上千的 不同位置上，管理这些分布式系统的唯一可行的方法是围绕可观测性、松耦合系统、声明式API和强大的自动化的简单范式，这些范式已经在云计算中促使云原生技术获得成功。Kubernetes已经成为边缘生态系统的关键部分，持续推动其集成和运维 --from <a href=\"https://www.cncf.io/wp-content/uploads/2022/06/KubernetesEdge-2022-report_FINAL.pdf\" target=\"_blank\">Reported from Kubernetes on EDGE DAY</a></li>\n</ul>\n<h1><a id=\"What_the_Cloud_Native_advantage_10\"></a>What the Cloud Native advantage</h1>\n<p>◆更高效、更稳定的资源调度与管理：<br />\n➢ 一致的使用体验：依托已成事实标准的Kubernetes API，边缘与云上数据中心一致的使用体验，降低学习成本<br />\n➢ 容器化应用交付：容器化的应用封装，屏蔽边缘复杂的底层硬件环境，应用交付更统一、更便捷<br />\n➢ 细粒度的应用管理: 针对边缘资源有限的环境，云原生以微服务方式提供极其灵活的方式来开发和交付更细粒度<br />\n的边缘服务，不需要更新整个单体应用<br />\n➢ 更稳定的边缘应用管理能力：依托边缘自治等能力，服务可以稳定运行在边缘<br />\n➢ 更快的故障恢复能力: 出现故障或存在错误的边缘应用可以迅速回滚，恢复到工作状态</p>\n<p>◆丰富的技术生态集成：<br />\n➢ 基于CNCF庞大、丰富的云原生技术生态，轻松与生态集成，构建监控、日志等系统能力</p>\n<p>◆使用云原生路径也带来经济利益:<br />\n➢ 云原生提供的带宽减少和流线型数据可以降低成本，使其成为一种非常有效的企业工具。 可以允许基于消费的边<br />\n缘计算定价方法，而无需大量的前期资本支出</p>\n<h1><a id=\"What_is_Edge_calculation_26\"></a>What is Edge calculation</h1>\n<h2><a id=\"_27\"></a>什么是云计算</h2>\n<ul>\n<li>云计算是指通过互联网按需访问计算资源 - 应用、服务器（物理服务器和虚拟服务器）、数据存储、开发工具和网络功能等等，这些资源托管在由云服务提供商（或 CSP）管理的远程数据中心内。 CSP 提供这些资源时会按月收取订阅费用，或者按使用量收费</li>\n</ul>\n<h2><a id=\"_30\"></a>什么是边缘计算</h2>\n<ul>\n<li>\n<ol>\n<li>对于中心云，边缘就算靠近业务现场，提供一定的算力支持</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>边缘解决本地业务实时、安全、业务持续性的问题</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>边缘无处不在，远远大于云端的数量</li>\n</ol>\n</li>\n</ul>\n<h2><a id=\"_35\"></a>云边协同的经典应用场景</h2>\n<ul>\n<li>CDN结合边缘计算向下一代内容分发平台升级<br />\nCDN结合边缘计算，将vCDN（virtual Content Delivery Network，虚拟内容分发网络）下沉到运营商的边缘数据中心，<br />\n从而降低响应时延，可提升QoS指标，同时提高用户体验，降低眩晕感和延迟卡顿。</li>\n<li>新时代的万亿云游戏市场<br />\n“快速切换，点开即玩”。新时代的云游戏利用云边协同快速扩张，游戏研发、硬件设备商、通信设备商、游戏平<br />\n台将基于自身现有优势从不同角度切入，实现万亿云游戏市场的突破。</li>\n<li>云边协同是工业互联网的重要支柱<br />\n在工业互联网场景中，边缘设备只能处理局部数据，无法形成全局认知，在实际应用中仍然需要借助云计算平台来实<br />\n现信息的融合。因此，云边协同正逐渐成为支撑工业互联网发展的重要支柱。</li>\n<li>传统能源产业的智慧升级<br />\n能源产业在传统模式下，需要大量的人力定期对数据进行收集和处理，一来人工成本非常高，二来数据分析效率低、<br />\n时延大。因此，云边协同正为传统能源产业的智慧升级提供道路。</li>\n<li>加速数字中国在农业领域落地<br />\n云边协同将推动农业供给端的变革，农业由经验主导向数据主导转变，通过智能化手段，可以将人的经验传递给机器，<br />\n通过数据挖掘，可以发现新的生产规律和农业商品优化的新空间。<br />\n家庭智能化信息服务成为可能</li>\n<li>云边协同使电器控制、安全保护、视频监控、定时控制、环境检测、场景控制、可视对讲等家庭智能化功能得以实<br />\n现，同时使政务、医疗、教育等产业进一步丰富家庭智能化信息服务成为可能。</li>\n<li>智慧交通借助云边协同向车路协同方向发展<br />\n车路协同是智慧交通的重要发展方向之一，能力构建涉及车内边缘计算、道路边缘计算、车路协同云等方面，云边<br />\n协同可以从多方面提供车车、车路动态实时信息交互，并开展车辆主动安全控制和道路协同管理。</li>\n<li>云边协同引领安防智能化技术潮流<br />\n现代安防监控可以和人工智能相结合，面向智能安防、视频监控、人脸识别等业务场景，以低时延、大带宽、快速<br />\n响应等特性实现本地分析、快速处理、实时响应。</li>\n<li>云边协同重新定义医疗保健<br />\n医疗保健是药师直接且负责任地提供的与药物治疗相关的服务，其目的是达到改善病人生命质量的确切效果，云边协同则从实时本地数据分析、数据断点续传、数据安全传输等方面让医生我患者提供更快、更高的护理<br />\n<sub>——中国信息通信研究院《云计算与边缘计算协同九大应用场景》</sub></li>\n</ul>\n<h1><a id=\"What_is_KubeEdge_65\"></a>What is KubeEdge</h1>\n<ul>\n<li>KubeEdge是一个开源系统，用于将容器化应用程序编排功能扩展到Edge的主机。它基于kubernetes构建，并为网络应用程序提供基础架构支持。云和边缘之间的部署和元数据同步</li>\n<li>KubeEdge 是CNCF首个云原生边缘计算项目</li>\n<li>KubeEdge Info：\n<ul>\n<li>官网：<a href=\"https://kubeedge.io/en/\" target=\"_blank\">https://kubeedge.io/en/</a></li>\n<li>GiteHub KubeEdge组织：<a href=\"https://github.com/kubeedge\" target=\"_blank\">https://github.com/kubeedge</a></li>\n<li>GitHub:<a href=\"https://github.com/kubeedge/kubeedge\" target=\"_blank\">https://github.com/kubeedge/kubeedge</a></li>\n</ul>\n</li>\n</ul>\n<h1><a id=\"KubeEdge_Info_73\"></a>KubeEdge Info</h1>\n<h2><a id=\"KubeEdge__74\"></a>KubeEdge 消息介绍</h2>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Piwriw/PicGo/image/20230211191153.png\" alt=\"20230211191153\" /></p>\n<h2><a id=\"KubeEdge__76\"></a>KubeEdge 发展历程</h2>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Piwriw/PicGo/image/20230211191305.png\" alt=\"20230211191305\" /></p>\n<h1><a id=\"_78\"></a>引用</h1>\n<ul>\n<li>云原生边缘计算公开课</li>\n<li>KubeEdge官网</li>\n<li>中国信息通信研究院《云计算与边缘计算协同九大应用场景》</li>\n</ul>\n', '<p>重要更新 2021.1.2 加入注册、登录、评论功能，后台管理加入评论审核功能</p>\n<h2><a id=\"介绍\" class=\"anchor\" href=\"https://gitee.com/wejectchan/ginblog#%E4%BB%8B%E7%BB%8D\"></a>介绍</h2>\n<p>gin+vue 全栈制作一个博客。</p>\n<p>这是一个分享全栈制作过程的项目，旨在为有兴趣接触 golang web 开发的朋友分享一些制作经验。</p>\n<p>你可以前往&nbsp;<a href=\"https://space.bilibili.com/402177130\" rel=\"nofollow\">B 站(https://space.bilibili.com/402177130)</a>&nbsp;观看全栈的制作过程，你也可以留言分享你的观点，非常乐意与你交流。</p>\n<h2><a id=\"目录结构\" class=\"anchor\" href=\"https://gitee.com/wejectchan/ginblog#%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\"></a>目录结构</h2>\n<div class=\"white\">\n<div class=\"highlight\">\n<pre><span id=\"LC1\" class=\"line\">│  .gitignore</span>\n<span id=\"LC2\" class=\"line\">│  go.mod // 项目依赖</span>\n<span id=\"LC3\" class=\"line\">│  go.sum</span>\n<span id=\"LC4\" class=\"line\">│  latest_log.log</span>\n<span id=\"LC5\" class=\"line\">│  LICENSE</span>\n<span id=\"LC6\" class=\"line\">│  main.go //主程序</span>\n<span id=\"LC7\" class=\"line\">│  README.md</span>\n<span id=\"LC8\" class=\"line\">│  tree.txt</span>\n<span id=\"LC9\" class=\"line\">│          </span>\n<span id=\"LC10\" class=\"line\">├─api         </span>\n<span id=\"LC11\" class=\"line\">├─config // 项目配置入口   </span>\n<span id=\"LC12\" class=\"line\">├─database  // 数据库备份文件（初始化）</span>\n<span id=\"LC13\" class=\"line\">├─log  // 项目日志</span>\n<span id=\"LC14\" class=\"line\">├─middleware  // 中间件</span>\n<span id=\"LC15\" class=\"line\">├─model // 数据模型层</span>\n<span id=\"LC16\" class=\"line\">├─routes</span>\n<span id=\"LC17\" class=\"line\">│      router.go // 路由入口    </span>\n<span id=\"LC18\" class=\"line\">├─static // 打包静态文件</span>\n<span id=\"LC19\" class=\"line\">│  ├─admin  // 后台管理页面              </span>\n<span id=\"LC20\" class=\"line\">│  └─front  // 前端展示页面          </span>\n<span id=\"LC21\" class=\"line\">├─upload   </span>\n<span id=\"LC22\" class=\"line\">├─utils // 项目公用工具库</span>\n<span id=\"LC23\" class=\"line\">│  │  setting.go </span>\n<span id=\"LC24\" class=\"line\">│  ├─errmsg   </span>\n<span id=\"LC25\" class=\"line\">│  └─validator         </span>\n<span id=\"LC26\" class=\"line\">└─web // 前端开发源码（VUECLI项目源文件<span class=\"o\">)</span></span>\n<span id=\"LC27\" class=\"line\">    ├─admin             </span>\n<span id=\"LC28\" class=\"line\">    └─front</span></pre>\n</div>\n</div>\n<h2><a id=\"运行部署\" class=\"anchor\" href=\"https://gitee.com/wejectchan/ginblog#%E8%BF%90%E8%A1%8C%E9%83%A8%E7%BD%B2\"></a>运行&amp;&amp;部署</h2>\n<ol>\n<li>\n<p>克隆项目</p>\n<div class=\"white\">\n<div class=\"highlight\">\n<pre><span id=\"LC1\" class=\"line\">git clone git@gitee.com:wejectchan/ginblog.git</span>\n<span id=\"LC2\" class=\"line\">or</span>\n<span id=\"LC3\" class=\"line\">git clone https://github.com/wejectchen/Ginblog.git</span></pre>\n</div>\n</div>\n</li>\n<li>\n<p>转到下面文件夹下</p>\n<p>cd yourPath/ginbolg</p>\n</li>\n<li>\n<p>安装依赖</p>\n</li>\n</ol>\n<div class=\"white\">\n<div class=\"highlight\">\n<pre><span id=\"LC1\" class=\"line\">go mod tidy</span></pre>\n</div>\n</div>\n<ol start=\"4\">\n<li>初始化项目配置config.ini</li>\n</ol>\n<div class=\"white\">\n<div class=\"highlight\">\n<pre><span id=\"LC1\" class=\"line\"><span class=\"err\">./config/config.ini</span></span>\n<span id=\"LC2\" class=\"line\"></span>\n<span id=\"LC3\" class=\"line\"><span class=\"nn\">[server]</span></span>\n<span id=\"LC4\" class=\"line\"><span class=\"py\">AppMode</span> <span class=\"p\">=</span> <span class=\"s\">debug # debug 开发模式，release 生产模式</span></span>\n<span id=\"LC5\" class=\"line\"><span class=\"py\">HttpPort</span> <span class=\"p\">=</span> <span class=\"s\">:3000 # 项目端口</span></span>\n<span id=\"LC6\" class=\"line\"><span class=\"py\">JwtKey</span> <span class=\"p\">=</span> <span class=\"s\">89js82js72 #JWT密钥，随机字符串即可</span></span>\n<span id=\"LC7\" class=\"line\"></span>\n<span id=\"LC8\" class=\"line\"><span class=\"nn\">[database]</span></span>\n<span id=\"LC9\" class=\"line\"><span class=\"py\">Db</span> <span class=\"p\">=</span> <span class=\"s\">mysql #数据库类型，不能变更为其他形式</span></span>\n<span id=\"LC10\" class=\"line\"><span class=\"py\">DbHost</span> <span class=\"p\">=</span> <span class=\"s\">127.0.0.1 # 数据库地址</span></span>\n<span id=\"LC11\" class=\"line\"><span class=\"py\">DbPort</span> <span class=\"p\">=</span> <span class=\"s\">3306 # 数据库端口</span></span>\n<span id=\"LC12\" class=\"line\"><span class=\"py\">DbUser</span> <span class=\"p\">=</span> <span class=\"s\">ginblog # 数据库用户名</span></span>\n<span id=\"LC13\" class=\"line\"><span class=\"py\">DbPassWord</span> <span class=\"p\">=</span> <span class=\"s\">admin123 # 数据库用户密码</span></span>\n<span id=\"LC14\" class=\"line\"><span class=\"py\">DbName</span> <span class=\"p\">=</span> <span class=\"s\">ginblog # 数据库名</span></span>\n<span id=\"LC15\" class=\"line\"></span>\n<span id=\"LC16\" class=\"line\"><span class=\"nn\">[qiniu]</span></span>\n<span id=\"LC17\" class=\"line\"><span class=\"c\"># 七牛储存信息</span></span>\n<span id=\"LC18\" class=\"line\"><span class=\"py\">AccessKey</span> <span class=\"p\">=</span> <span class=\"c\"># AK</span></span>\n<span id=\"LC19\" class=\"line\"><span class=\"s\">SecretKey = # SK</span></span>\n<span id=\"LC20\" class=\"line\"><span class=\"py\">Bucket</span> <span class=\"p\">=</span> </span>\n<span id=\"LC21\" class=\"line\"><span class=\"s\">QiniuSever =</span></span></pre>\n</div>\n</div>\n<ol start=\"5\">\n<li>\n<p>在database中将sql文件导入数据库</p>\n<p>推荐navicat或者其他sql管理工具导入</p>\n</li>\n<li>\n<p>启动项目</p>\n</li>\n</ol>\n<div class=\"white\">\n<div class=\"highlight\">\n<pre><span id=\"LC1\" class=\"line\"> go run main.go</span></pre>\n</div>\n</div>\n<p>此时，项目启动，你可以访问页面</p>\n<div class=\"white\">\n<div class=\"highlight\">\n<pre><span id=\"LC1\" class=\"line\">首页</span>\n<span id=\"LC2\" class=\"line\">http://localhost:3000</span>\n<span id=\"LC3\" class=\"line\">后台管理页面</span>\n<span id=\"LC4\" class=\"line\">http://localhost:3000/admin</span>\n<span id=\"LC5\" class=\"line\"></span>\n<span id=\"LC6\" class=\"line\">默认管理员:admin  密码:123456</span></pre>\n</div>\n</div>\n<p>enjoy~~~~</p>\n<h4><a id=\"使用二开过程中发现问题或者有功能需求欢迎提交-iusse-或者直接-pr\" class=\"anchor\" href=\"https://gitee.com/wejectchan/ginblog#%E4%BD%BF%E7%94%A8%E4%BA%8C%E5%BC%80%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%8F%91%E7%8E%B0%E9%97%AE%E9%A2%98%E6%88%96%E8%80%85%E6%9C%89%E5%8A%9F%E8%83%BD%E9%9C%80%E6%B1%82%E6%AC%A2%E8%BF%8E%E6%8F%90%E4%BA%A4-iusse-%E6%88%96%E8%80%85%E7%9B%B4%E6%8E%A5-pr\"></a>==使用、二开过程中，发现问题或者有功能需求欢迎提交&nbsp;<code>Iusse</code>&nbsp;或者直接&nbsp;<code>PR</code>==</h4>\n<h2><a id=\"实现功能\" class=\"anchor\" href=\"https://gitee.com/wejectchan/ginblog#%E5%AE%9E%E7%8E%B0%E5%8A%9F%E8%83%BD\"></a>实现功能</h2>\n<ol>\n<li>简单的用户管理权限设置</li>\n<li>用户密码加密存储</li>\n<li>文章分类自定义</li>\n<li>列表分页</li>\n<li>图片上传七牛云</li>\n<li>JWT 认证</li>\n<li>自定义日志功能</li>\n<li>跨域 cors 设置</li>\n<li>[todo] 文章评论功能</li>\n</ol>\n<h2><a id=\"技术栈\" class=\"anchor\" href=\"https://gitee.com/wejectchan/ginblog#%E6%8A%80%E6%9C%AF%E6%A0%88\"></a>技术栈</h2>\n<ul>\n<li>golang\n<ul>\n<li>Gin web framework</li>\n<li>gorm(v1 &amp;&amp; v2)</li>\n<li>jwt-go</li>\n<li>scrypt</li>\n<li>logrus</li>\n<li>gin-contrib/cors</li>\n<li>go-playground/validator/v10</li>\n<li>go-ini</li>\n</ul>\n</li>\n<li>JavaScript\n<ul>\n<li>vue</li>\n<li>vue cli</li>\n<li>vue router</li>\n<li>ant design vue</li>\n<li>vuetify</li>\n<li>axios</li>\n<li>tinymce</li>\n<li>moment</li>\n</ul>\n</li>\n<li>MySQL version:8.0.21</li>\n</ul>\n<h2><a id=\"项目预览\" class=\"anchor\" href=\"https://gitee.com/wejectchan/ginblog#%E9%A1%B9%E7%9B%AE%E9%A2%84%E8%A7%88\"></a>项目预览</h2>\n<ul>\n<li>\n<p>前端展示页面</p>\n</li>\n<li>\n<p>&nbsp;<img src=\"https://gitee.com/wejectchan/ginblog/raw/master/upload/front1.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>前端展示页面</p>\n</li>\n<li>\n<p>&nbsp;<img src=\"https://gitee.com/wejectchan/ginblog/raw/master/upload/front2.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>后台登录页面</p>\n<p><img src=\"https://gitee.com/wejectchan/ginblog/raw/master/upload/admin.jpg\" alt=\"\" /></p>\n</li>\n<li>\n<p>后台管理页面</p>\n<p><img src=\"https://gitee.com/wejectchan/ginblog/raw/master/upload/admin2.jpg\" alt=\"\" /></p>\n</li>\n</ul>\n<h2><a id=\"更新进度制作视频已基本全部更新完毕\" class=\"anchor\" href=\"https://gitee.com/wejectchan/ginblog#%E6%9B%B4%E6%96%B0%E8%BF%9B%E5%BA%A6%E5%88%B6%E4%BD%9C%E8%A7%86%E9%A2%91%E5%B7%B2%E5%9F%BA%E6%9C%AC%E5%85%A8%E9%83%A8%E6%9B%B4%E6%96%B0%E5%AE%8C%E6%AF%95\"></a>更新进度(制作视频已基本全部更新完毕)</h2>\n<h3><a id=\"后端完成\" class=\"anchor\" href=\"https://gitee.com/wejectchan/ginblog#%E5%90%8E%E7%AB%AF%E5%AE%8C%E6%88%90\"></a>后端完成</h3>\n<p><a href=\"https://www.bilibili.com/video/BV1AA411v7e6\" rel=\"nofollow\">第一节 初始化项目+配置参数</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1A5411a7cf\" rel=\"nofollow\">第二节 配置数据库，数据模型</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1oA411e7kM\" rel=\"nofollow\">第三节 构架错误处理模块和路由接口</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1A5411a7qw\" rel=\"nofollow\">第四节 编写用户模块接口，实现初步验证+分页功能</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1AD4y1D7BX\" rel=\"nofollow\">第五节 用户密码加密存储策略介绍及选择</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV19f4y1R7RE\" rel=\"nofollow\">第六节 编写编辑用户信息+删除用户接口</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV16Z4y1T7Nc\" rel=\"nofollow\">第七节 完成博客分类接口编写</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1JD4y1U76f\" rel=\"nofollow\">第八节 编写博客文章接口（新增、编辑、删除）</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1YT4y1j7Co\" rel=\"nofollow\">第九节 完成博客文章接口（文章和分类的关联查询）</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1Mp4y1q76P\" rel=\"nofollow\">第十节 编写登录接口，完成 JWT 中间件</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1cZ4y1M79w\" rel=\"nofollow\">第十一节 完成登录接口</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV17V411z7cW\" rel=\"nofollow\">第十二节 完成上传接口（GIN+七牛对象储存）</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV16v411v7D7\" rel=\"nofollow\">第十三节 处理日志系统（自定义日志、按时间分割日志、软连接最新日志）</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1Hi4y1g7aj\" rel=\"nofollow\">第十四节 后端数据验证、跨域参数配置、增加列表查询的总数返回</a></p>\n<h3><a id=\"前端后台管理页面完成\" class=\"anchor\" href=\"https://gitee.com/wejectchan/ginblog#%E5%89%8D%E7%AB%AF%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E9%A1%B5%E9%9D%A2%E5%AE%8C%E6%88%90\"></a>前端后台管理页面完成</h3>\n<p><a href=\"https://www.bilibili.com/video/BV16T4y157JB\" rel=\"nofollow\">第一节 前端初始化，开发环境搭建及相关依赖安装</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1oi4y1u7ZJ\" rel=\"nofollow\">第二节 编写登录页面，实现数据双向绑定和数据验证</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1JK4y1Y7pd\" rel=\"nofollow\">第三节 完成登录页面</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1Ni4y1g7ju\" rel=\"nofollow\">第四节 配置路由导航守卫，搭建后台管理页面框架</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1sC4y187Pc\" rel=\"nofollow\">第五节 完成后台页面菜单栏和页面路由跳转</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV19D4y127U9\" rel=\"nofollow\">第六节 编写用户列表页面</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV19V411U7ud\" rel=\"nofollow\">第七节 用户列表搜索和删除功能</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV19D4y127kb\" rel=\"nofollow\">第八节 完成用户列表新增用户和编辑用户功能</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV19h411d7eF\" rel=\"nofollow\">第九节 修复部分 BUG</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1rv411y7Wm\" rel=\"nofollow\">第十节 编写分类列表和文章列表页面</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV19h41197BB\" rel=\"nofollow\">第十一节 完成新增文章和编辑文章页面</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1Uz4y1f76J\" rel=\"nofollow\">第十二节 自定义封装 tinymce 富文本编辑器，实现编辑器本地上传图片等功能</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV12i4y1M7eD\" rel=\"nofollow\">第十三节 后台页面完结，vue 打包部署</a></p>\n<h3><a id=\"前端展示页面正在更新中\" class=\"anchor\" href=\"https://gitee.com/wejectchan/ginblog#%E5%89%8D%E7%AB%AF%E5%B1%95%E7%A4%BA%E9%A1%B5%E9%9D%A2%E6%AD%A3%E5%9C%A8%E6%9B%B4%E6%96%B0%E4%B8%AD\"></a>前端展示页面（正在更新中）</h3>\n<p><a href=\"https://www.bilibili.com/video/BV1LX4y1u7py\" rel=\"nofollow\">第一节 搭建项目框架</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1EZ4y137qG\" rel=\"nofollow\">第二节 编写主内容区+个人介绍</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV17v411t7Gw\" rel=\"nofollow\">第三节 完成个人简介更新功能</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV17y4y1U7FB\" rel=\"nofollow\">第四节 完成文章列表页面</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1Eo4y1Z7c9\" rel=\"nofollow\">第五节 完成文章详情页面</a></p>\n<h2><a id=\"thanks-for-free-jetbrains-open-source-license\" class=\"anchor\" href=\"https://gitee.com/wejectchan/ginblog#thanks-for-free-jetbrains-open-source-license\"></a>Thanks for free JetBrains Open Source license</h2>\n<p>感谢JetBrains免费开源授权</p>\n<p><a href=\"https://www.jetbrains.com/\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://gitee.com/wejectchan/ginblog/raw/master/upload/jet.png\" height=\"200\" /></a></p>', 'http://test.scjglaw.cn/FhYPOILPGojxSkaJHcyXHnwd9QWA', 2, 17);
INSERT INTO `article` VALUES (593, '2023-02-28 11:00:49.291', NULL, '2023-02-28 12:19:31.974', ' why I write the series of kubeedge', 1, '\nwhy I write the series of kubeedge', '<h1><a id=\"why_I_write_the_series_of_kubeedge_0\"></a>why I write the series of kubeedge</h1>\n<ul>\n<li>It base on an experience I had studying kubeege. What is more,I chose it as my graduation project.(ps： somethings from Kubeedge 云原生边缘计算公开课) When I stumbled upon this series of courses.</li>\n<li>Now let get it!</li>\n</ul>\n<h1><a id=\"Backgroud_of_Edge_calculation_3\"></a>Backgroud of Edge calculation</h1>\n<ul>\n<li>Famous words:&quot; <strong>The future is here and it is built on cloud native</strong> &quot; (未来就在这里，它建立在云原生之上)</li>\n<li>Edge Computing will be 4x larger than cloud and will generate 75% of data worldwide by 2025. With hardware and<br />\nsoftware spread across hundreds or thousands of locations, the only feasible way to manage these distributed systems<br />\nare the simple paradigms around observability, loosely coupled systems, declarative APIs, and robust automation, that have made cloud native technologies so successful in the cloud. Kubernetes is already becoming a key part of the edge ecosystem, driving integrations and operations</li>\n<li>到2025年，全世界75%的数据将会产生于边缘，边缘计算的规模将会比云大4倍。由于软硬件分散部署在成百上千的 不同位置上，管理这些分布式系统的唯一可行的方法是围绕可观测性、松耦合系统、声明式API和强大的自动化的简单范式，这些范式已经在云计算中促使云原生技术获得成功。Kubernetes已经成为边缘生态系统的关键部分，持续推动其集成和运维 --from <a href=\"https://www.cncf.io/wp-content/uploads/2022/06/KubernetesEdge-2022-report_FINAL.pdf\" target=\"_blank\">Reported from Kubernetes on EDGE DAY</a></li>\n</ul>\n<h1><a id=\"What_the_Cloud_Native_advantage_10\"></a>What the Cloud Native advantage</h1>\n<p>◆更高效、更稳定的资源调度与管理：<br />\n➢ 一致的使用体验：依托已成事实标准的Kubernetes API，边缘与云上数据中心一致的使用体验，降低学习成本<br />\n➢ 容器化应用交付：容器化的应用封装，屏蔽边缘复杂的底层硬件环境，应用交付更统一、更便捷<br />\n➢ 细粒度的应用管理: 针对边缘资源有限的环境，云原生以微服务方式提供极其灵活的方式来开发和交付更细粒度<br />\n的边缘服务，不需要更新整个单体应用<br />\n➢ 更稳定的边缘应用管理能力：依托边缘自治等能力，服务可以稳定运行在边缘<br />\n➢ 更快的故障恢复能力: 出现故障或存在错误的边缘应用可以迅速回滚，恢复到工作状态</p>\n<p>◆丰富的技术生态集成：<br />\n➢ 基于CNCF庞大、丰富的云原生技术生态，轻松与生态集成，构建监控、日志等系统能力</p>\n<p>◆使用云原生路径也带来经济利益:<br />\n➢ 云原生提供的带宽减少和流线型数据可以降低成本，使其成为一种非常有效的企业工具。 可以允许基于消费的边<br />\n缘计算定价方法，而无需大量的前期资本支出</p>\n<h1><a id=\"What_is_Edge_calculation_26\"></a>What is Edge calculation</h1>\n<h2><a id=\"_27\"></a>什么是云计算</h2>\n<ul>\n<li>云计算是指通过互联网按需访问计算资源 - 应用、服务器（物理服务器和虚拟服务器）、数据存储、开发工具和网络功能等等，这些资源托管在由云服务提供商（或 CSP）管理的远程数据中心内。 CSP 提供这些资源时会按月收取订阅费用，或者按使用量收费</li>\n</ul>\n<h2><a id=\"_30\"></a>什么是边缘计算</h2>\n<ul>\n<li>\n<ol>\n<li>对于中心云，边缘就算靠近业务现场，提供一定的算力支持</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>边缘解决本地业务实时、安全、业务持续性的问题</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>边缘无处不在，远远大于云端的数量</li>\n</ol>\n</li>\n</ul>\n<h2><a id=\"_35\"></a>云边协同的经典应用场景</h2>\n<ul>\n<li>CDN结合边缘计算向下一代内容分发平台升级<br />\nCDN结合边缘计算，将vCDN（virtual Content Delivery Network，虚拟内容分发网络）下沉到运营商的边缘数据中心，<br />\n从而降低响应时延，可提升QoS指标，同时提高用户体验，降低眩晕感和延迟卡顿。</li>\n<li>新时代的万亿云游戏市场<br />\n“快速切换，点开即玩”。新时代的云游戏利用云边协同快速扩张，游戏研发、硬件设备商、通信设备商、游戏平<br />\n台将基于自身现有优势从不同角度切入，实现万亿云游戏市场的突破。</li>\n<li>云边协同是工业互联网的重要支柱<br />\n在工业互联网场景中，边缘设备只能处理局部数据，无法形成全局认知，在实际应用中仍然需要借助云计算平台来实<br />\n现信息的融合。因此，云边协同正逐渐成为支撑工业互联网发展的重要支柱。</li>\n<li>传统能源产业的智慧升级<br />\n能源产业在传统模式下，需要大量的人力定期对数据进行收集和处理，一来人工成本非常高，二来数据分析效率低、<br />\n时延大。因此，云边协同正为传统能源产业的智慧升级提供道路。</li>\n<li>加速数字中国在农业领域落地<br />\n云边协同将推动农业供给端的变革，农业由经验主导向数据主导转变，通过智能化手段，可以将人的经验传递给机器，<br />\n通过数据挖掘，可以发现新的生产规律和农业商品优化的新空间。<br />\n家庭智能化信息服务成为可能</li>\n<li>云边协同使电器控制、安全保护、视频监控、定时控制、环境检测、场景控制、可视对讲等家庭智能化功能得以实<br />\n现，同时使政务、医疗、教育等产业进一步丰富家庭智能化信息服务成为可能。</li>\n<li>智慧交通借助云边协同向车路协同方向发展<br />\n车路协同是智慧交通的重要发展方向之一，能力构建涉及车内边缘计算、道路边缘计算、车路协同云等方面，云边<br />\n协同可以从多方面提供车车、车路动态实时信息交互，并开展车辆主动安全控制和道路协同管理。</li>\n<li>云边协同引领安防智能化技术潮流<br />\n现代安防监控可以和人工智能相结合，面向智能安防、视频监控、人脸识别等业务场景，以低时延、大带宽、快速<br />\n响应等特性实现本地分析、快速处理、实时响应。</li>\n<li>云边协同重新定义医疗保健<br />\n医疗保健是药师直接且负责任地提供的与药物治疗相关的服务，其目的是达到改善病人生命质量的确切效果，云边协同则从实时本地数据分析、数据断点续传、数据安全传输等方面让医生我患者提供更快、更高的护理<br />\n<sub>——中国信息通信研究院《云计算与边缘计算协同九大应用场景》</sub></li>\n</ul>\n<h1><a id=\"What_is_KubeEdge_65\"></a>What is KubeEdge</h1>\n<ul>\n<li>KubeEdge是一个开源系统，用于将容器化应用程序编排功能扩展到Edge的主机。它基于kubernetes构建，并为网络应用程序提供基础架构支持。云和边缘之间的部署和元数据同步</li>\n<li>KubeEdge 是CNCF首个云原生边缘计算项目</li>\n<li>KubeEdge Info：\n<ul>\n<li>官网：<a href=\"https://kubeedge.io/en/\" target=\"_blank\">https://kubeedge.io/en/</a></li>\n<li>GiteHub KubeEdge组织：<a href=\"https://github.com/kubeedge\" target=\"_blank\">https://github.com/kubeedge</a></li>\n<li>GitHub:<a href=\"https://github.com/kubeedge/kubeedge\" target=\"_blank\">https://github.com/kubeedge/kubeedge</a></li>\n</ul>\n</li>\n</ul>\n<h1><a id=\"KubeEdge_Info_73\"></a>KubeEdge Info</h1>\n<h2><a id=\"KubeEdge__74\"></a>KubeEdge 消息介绍</h2>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Piwriw/PicGo/image/20230211191153.png\" alt=\"20230211191153\" /></p>\n<h2><a id=\"KubeEdge__76\"></a>KubeEdge 发展历程</h2>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Piwriw/PicGo/image/20230211191305.png\" alt=\"20230211191305\" /></p>\n<h1><a id=\"_78\"></a>引用</h1>\n<ul>\n<li>云原生边缘计算公开课</li>\n<li>KubeEdge官网</li>\n<li>中国信息通信研究院《云计算与边缘计算协同九大应用场景》</li>\n</ul>\n', '# why I write the series of kubeedge\n- It base on an experience I had studying kubeege. What is more,I chose it as my graduation project.(ps： somethings from Kubeedge 云原生边缘计算公开课) When I stumbled upon this series of courses.\n- Now let get it!\n# Backgroud of Edge calculation\n- Famous words:\" **The future is here and it is built on cloud native** \" (未来就在这里，它建立在云原生之上)\n- Edge Computing will be 4x larger than cloud and will generate 75% of data worldwide by 2025. With hardware and \nsoftware spread across hundreds or thousands of locations, the only feasible way to manage these distributed systems \nare the simple paradigms around observability, loosely coupled systems, declarative APIs, and robust automation, that have made cloud native technologies so successful in the cloud. Kubernetes is already becoming a key part of the edge ecosystem, driving integrations and operations\n- 到2025年，全世界75%的数据将会产生于边缘，边缘计算的规模将会比云大4倍。由于软硬件分散部署在成百上千的 不同位置上，管理这些分布式系统的唯一可行的方法是围绕可观测性、松耦合系统、声明式API和强大的自动化的简单范式，这些范式已经在云计算中促使云原生技术获得成功。Kubernetes已经成为边缘生态系统的关键部分，持续推动其集成和运维 --from [Reported from Kubernetes on EDGE DAY](https://www.cncf.io/wp-content/uploads/2022/06/KubernetesEdge-2022-report_FINAL.pdf)\n\n# What the Cloud Native advantage\n◆更高效、更稳定的资源调度与管理：\n    ➢ 一致的使用体验：依托已成事实标准的Kubernetes API，边缘与云上数据中心一致的使用体验，降低学习成本\n    ➢ 容器化应用交付：容器化的应用封装，屏蔽边缘复杂的底层硬件环境，应用交付更统一、更便捷\n    ➢ 细粒度的应用管理: 针对边缘资源有限的环境，云原生以微服务方式提供极其灵活的方式来开发和交付更细粒度\n的边缘服务，不需要更新整个单体应用\n    ➢ 更稳定的边缘应用管理能力：依托边缘自治等能力，服务可以稳定运行在边缘\n    ➢ 更快的故障恢复能力: 出现故障或存在错误的边缘应用可以迅速回滚，恢复到工作状态\n\n◆丰富的技术生态集成：\n➢ 基于CNCF庞大、丰富的云原生技术生态，轻松与生态集成，构建监控、日志等系统能力\n\n◆使用云原生路径也带来经济利益: \n➢ 云原生提供的带宽减少和流线型数据可以降低成本，使其成为一种非常有效的企业工具。 可以允许基于消费的边\n缘计算定价方法，而无需大量的前期资本支出\n\n# What is Edge calculation\n## 什么是云计算\n- 云计算是指通过互联网按需访问计算资源 - 应用、服务器（物理服务器和虚拟服务器）、数据存储、开发工具和网络功能等等，这些资源托管在由云服务提供商（或 CSP）管理的远程数据中心内。 CSP 提供这些资源时会按月收取订阅费用，或者按使用量收费\n\n## 什么是边缘计算\n- 1. 对于中心云，边缘就算靠近业务现场，提供一定的算力支持\n- 2. 边缘解决本地业务实时、安全、业务持续性的问题\n- 3. 边缘无处不在，远远大于云端的数量\n\n## 云边协同的经典应用场景\n- CDN结合边缘计算向下一代内容分发平台升级\nCDN结合边缘计算，将vCDN（virtual Content Delivery Network，虚拟内容分发网络）下沉到运营商的边缘数据中心，\n从而降低响应时延，可提升QoS指标，同时提高用户体验，降低眩晕感和延迟卡顿。\n- 新时代的万亿云游戏市场\n“快速切换，点开即玩”。新时代的云游戏利用云边协同快速扩张，游戏研发、硬件设备商、通信设备商、游戏平\n台将基于自身现有优势从不同角度切入，实现万亿云游戏市场的突破。\n- 云边协同是工业互联网的重要支柱\n在工业互联网场景中，边缘设备只能处理局部数据，无法形成全局认知，在实际应用中仍然需要借助云计算平台来实\n现信息的融合。因此，云边协同正逐渐成为支撑工业互联网发展的重要支柱。\n- 传统能源产业的智慧升级\n能源产业在传统模式下，需要大量的人力定期对数据进行收集和处理，一来人工成本非常高，二来数据分析效率低、\n时延大。因此，云边协同正为传统能源产业的智慧升级提供道路。\n- 加速数字中国在农业领域落地\n云边协同将推动农业供给端的变革，农业由经验主导向数据主导转变，通过智能化手段，可以将人的经验传递给机器，\n通过数据挖掘，可以发现新的生产规律和农业商品优化的新空间。\n家庭智能化信息服务成为可能\n- 云边协同使电器控制、安全保护、视频监控、定时控制、环境检测、场景控制、可视对讲等家庭智能化功能得以实\n现，同时使政务、医疗、教育等产业进一步丰富家庭智能化信息服务成为可能。\n- 智慧交通借助云边协同向车路协同方向发展\n车路协同是智慧交通的重要发展方向之一，能力构建涉及车内边缘计算、道路边缘计算、车路协同云等方面，云边\n协同可以从多方面提供车车、车路动态实时信息交互，并开展车辆主动安全控制和道路协同管理。\n- 云边协同引领安防智能化技术潮流\n现代安防监控可以和人工智能相结合，面向智能安防、视频监控、人脸识别等业务场景，以低时延、大带宽、快速\n响应等特性实现本地分析、快速处理、实时响应。\n- 云边协同重新定义医疗保健\n医疗保健是药师直接且负责任地提供的与药物治疗相关的服务，其目的是达到改善病人生命质量的确切效果，云边协同则从实时本地数据分析、数据断点续传、数据安全传输等方面让医生我患者提供更快、更高的护理\n~——中国信息通信研究院《云计算与边缘计算协同九大应用场景》~\n\n\n# What is KubeEdge\n- KubeEdge是一个开源系统，用于将容器化应用程序编排功能扩展到Edge的主机。它基于kubernetes构建，并为网络应用程序提供基础架构支持。云和边缘之间的部署和元数据同步\n- KubeEdge 是CNCF首个云原生边缘计算项目\n- KubeEdge Info：\n    - 官网：[https://kubeedge.io/en/](https://kubeedge.io/en/) \n    - GiteHub KubeEdge组织：[https://github.com/kubeedge](https://github.com/kubeedge)\n    - GitHub:[https://github.com/kubeedge/kubeedge](https://github.com/kubeedge/kubeedge)\n\n# KubeEdge Info\n## KubeEdge 消息介绍\n![20230211191153](https://cdn.jsdelivr.net/gh/Piwriw/PicGo/image/20230211191153.png)\n## KubeEdge 发展历程\n![20230211191305](https://cdn.jsdelivr.net/gh/Piwriw/PicGo/image/20230211191305.png)\n# 引用\n- 云原生边缘计算公开课\n- KubeEdge官网\n- 中国信息通信研究院《云计算与边缘计算协同九大应用场景》\n\n', '', 0, 12);
INSERT INTO `article` VALUES (594, '2023-02-28 12:27:15.789', '2023-03-01 18:13:06.969', NULL, 'kubeedge12', 1, 'kubeedge2', '<h1><a id=\"why_I_write_the_series_of_kubeedge_0\"></a>why I write the series of kubeedge</h1>\n<ul>\n<li>It base on an experience I had studying kubeege. What is more,I chose it as my graduation project.(ps： somethings from Kubeedge 云原生边缘计算公开课) When I stumbled upon this series of courses.</li>\n<li>Now let get it!</li>\n</ul>\n<h1><a id=\"Backgroud_of_Edge_calculation_3\"></a>Backgroud of Edge calculation</h1>\n<ul>\n<li>Famous words:&quot; <strong>The future is here and it is built on cloud native</strong> &quot; (未来就在这里，它建立在云原生之上)</li>\n<li>Edge Computing will be 4x larger than cloud and will generate 75% of data worldwide by 2025. With hardware and<br />\nsoftware spread across hundreds or thousands of locations, the only feasible way to manage these distributed systems<br />\nare the simple paradigms around observability, loosely coupled systems, declarative APIs, and robust automation, that have made cloud native technologies so successful in the cloud. Kubernetes is already becoming a key part of the edge ecosystem, driving integrations and operations</li>\n<li>到2025年，全世界75%的数据将会产生于边缘，边缘计算的规模将会比云大4倍。由于软硬件分散部署在成百上千的 不同位置上，管理这些分布式系统的唯一可行的方法是围绕可观测性、松耦合系统、声明式API和强大的自动化的简单范式，这些范式已经在云计算中促使云原生技术获得成功。Kubernetes已经成为边缘生态系统的关键部分，持续推动其集成和运维 --from <a href=\"https://www.cncf.io/wp-content/uploads/2022/06/KubernetesEdge-2022-report_FINAL.pdf\" target=\"_blank\">Reported from Kubernetes on EDGE DAY</a></li>\n</ul>\n<h1><a id=\"What_the_Cloud_Native_advantage_10\"></a>What the Cloud Native advantage</h1>\n<p>◆更高效、更稳定的资源调度与管理：<br />\n➢ 一致的使用体验：依托已成事实标准的Kubernetes API，边缘与云上数据中心一致的使用体验，降低学习成本<br />\n➢ 容器化应用交付：容器化的应用封装，屏蔽边缘复杂的底层硬件环境，应用交付更统一、更便捷<br />\n➢ 细粒度的应用管理: 针对边缘资源有限的环境，云原生以微服务方式提供极其灵活的方式来开发和交付更细粒度<br />\n的边缘服务，不需要更新整个单体应用<br />\n➢ 更稳定的边缘应用管理能力：依托边缘自治等能力，服务可以稳定运行在边缘<br />\n➢ 更快的故障恢复能力: 出现故障或存在错误的边缘应用可以迅速回滚，恢复到工作状态</p>\n<p>◆丰富的技术生态集成：<br />\n➢ 基于CNCF庞大、丰富的云原生技术生态，轻松与生态集成，构建监控、日志等系统能力</p>\n<p>◆使用云原生路径也带来经济利益:<br />\n➢ 云原生提供的带宽减少和流线型数据可以降低成本，使其成为一种非常有效的企业工具。 可以允许基于消费的边<br />\n缘计算定价方法，而无需大量的前期资本支出</p>\n<h1><a id=\"What_is_Edge_calculation_26\"></a>What is Edge calculation</h1>\n<h2><a id=\"_27\"></a>什么是云计算</h2>\n<ul>\n<li>云计算是指通过互联网按需访问计算资源 - 应用、服务器（物理服务器和虚拟服务器）、数据存储、开发工具和网络功能等等，这些资源托管在由云服务提供商（或 CSP）管理的远程数据中心内。 CSP 提供这些资源时会按月收取订阅费用，或者按使用量收费</li>\n</ul>\n<h2><a id=\"_30\"></a>什么是边缘计算</h2>\n<ul>\n<li>\n<ol>\n<li>对于中心云，边缘就算靠近业务现场，提供一定的算力支持</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>边缘解决本地业务实时、安全、业务持续性的问题</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>边缘无处不在，远远大于云端的数量</li>\n</ol>\n</li>\n</ul>\n<h2><a id=\"_35\"></a>云边协同的经典应用场景</h2>\n<ul>\n<li>CDN结合边缘计算向下一代内容分发平台升级<br />\nCDN结合边缘计算，将vCDN（virtual Content Delivery Network，虚拟内容分发网络）下沉到运营商的边缘数据中心，<br />\n从而降低响应时延，可提升QoS指标，同时提高用户体验，降低眩晕感和延迟卡顿。</li>\n<li>新时代的万亿云游戏市场<br />\n“快速切换，点开即玩”。新时代的云游戏利用云边协同快速扩张，游戏研发、硬件设备商、通信设备商、游戏平<br />\n台将基于自身现有优势从不同角度切入，实现万亿云游戏市场的突破。</li>\n<li>云边协同是工业互联网的重要支柱<br />\n在工业互联网场景中，边缘设备只能处理局部数据，无法形成全局认知，在实际应用中仍然需要借助云计算平台来实<br />\n现信息的融合。因此，云边协同正逐渐成为支撑工业互联网发展的重要支柱。</li>\n<li>传统能源产业的智慧升级<br />\n能源产业在传统模式下，需要大量的人力定期对数据进行收集和处理，一来人工成本非常高，二来数据分析效率低、<br />\n时延大。因此，云边协同正为传统能源产业的智慧升级提供道路。</li>\n<li>加速数字中国在农业领域落地<br />\n云边协同将推动农业供给端的变革，农业由经验主导向数据主导转变，通过智能化手段，可以将人的经验传递给机器，<br />\n通过数据挖掘，可以发现新的生产规律和农业商品优化的新空间。<br />\n家庭智能化信息服务成为可能</li>\n<li>云边协同使电器控制、安全保护、视频监控、定时控制、环境检测、场景控制、可视对讲等家庭智能化功能得以实<br />\n现，同时使政务、医疗、教育等产业进一步丰富家庭智能化信息服务成为可能。</li>\n<li>智慧交通借助云边协同向车路协同方向发展<br />\n车路协同是智慧交通的重要发展方向之一，能力构建涉及车内边缘计算、道路边缘计算、车路协同云等方面，云边<br />\n协同可以从多方面提供车车、车路动态实时信息交互，并开展车辆主动安全控制和道路协同管理。</li>\n<li>云边协同引领安防智能化技术潮流<br />\n现代安防监控可以和人工智能相结合，面向智能安防、视频监控、人脸识别等业务场景，以低时延、大带宽、快速<br />\n响应等特性实现本地分析、快速处理、实时响应。</li>\n<li>云边协同重新定义医疗保健<br />\n医疗保健是药师直接且负责任地提供的与药物治疗相关的服务，其目的是达到改善病人生命质量的确切效果，云边协同则从实时本地数据分析、数据断点续传、数据安全传输等方面让医生我患者提供更快、更高的护理<br />\n<sub>——中国信息通信研究院《云计算与边缘计算协同九大应用场景》</sub></li>\n</ul>\n<h1><a id=\"What_is_KubeEdge_65\"></a>What is KubeEdge</h1>\n<ul>\n<li>KubeEdge是一个开源系统，用于将容器化应用程序编排功能扩展到Edge的主机。它基于kubernetes构建，并为网络应用程序提供基础架构支持。云和边缘之间的部署和元数据同步</li>\n<li>KubeEdge 是CNCF首个云原生边缘计算项目</li>\n<li>KubeEdge Info：\n<ul>\n<li>官网：<a href=\"https://kubeedge.io/en/\" target=\"_blank\">https://kubeedge.io/en/</a></li>\n<li>GiteHub KubeEdge组织：<a href=\"https://github.com/kubeedge\" target=\"_blank\">https://github.com/kubeedge</a></li>\n<li>GitHub:<a href=\"https://github.com/kubeedge/kubeedge\" target=\"_blank\">https://github.com/kubeedge/kubeedge</a></li>\n</ul>\n</li>\n</ul>\n<h1><a id=\"KubeEdge_Info_73\"></a>KubeEdge Info</h1>\n<h2><a id=\"KubeEdge__74\"></a>KubeEdge 消息介绍</h2>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Piwriw/PicGo/image/20230211191153.png\" alt=\"20230211191153\" /></p>\n<h2><a id=\"KubeEdge__76\"></a>KubeEdge 发展历程</h2>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Piwriw/PicGo/image/20230211191305.png\" alt=\"20230211191305\" /></p>\n<h1><a id=\"_78\"></a>引用</h1>\n<ul>\n<li>云原生边缘计算公开课</li>\n<li>KubeEdge官网</li>\n<li>中国信息通信研究院《云计算与边缘计算协同九大应用场景》</li>\n</ul>\n', '# why I write the series of kubeedge\n- It base on an experience I had studying kubeege. What is more,I chose it as my graduation project.(ps： somethings from Kubeedge 云原生边缘计算公开课) When I stumbled upon this series of courses.\n- Now let get it!\n# Backgroud of Edge calculation\n- Famous words:\" **The future is here and it is built on cloud native** \" (未来就在这里，它建立在云原生之上)\n- Edge Computing will be 4x larger than cloud and will generate 75% of data worldwide by 2025. With hardware and \nsoftware spread across hundreds or thousands of locations, the only feasible way to manage these distributed systems \nare the simple paradigms around observability, loosely coupled systems, declarative APIs, and robust automation, that have made cloud native technologies so successful in the cloud. Kubernetes is already becoming a key part of the edge ecosystem, driving integrations and operations\n- 到2025年，全世界75%的数据将会产生于边缘，边缘计算的规模将会比云大4倍。由于软硬件分散部署在成百上千的 不同位置上，管理这些分布式系统的唯一可行的方法是围绕可观测性、松耦合系统、声明式API和强大的自动化的简单范式，这些范式已经在云计算中促使云原生技术获得成功。Kubernetes已经成为边缘生态系统的关键部分，持续推动其集成和运维 --from [Reported from Kubernetes on EDGE DAY](https://www.cncf.io/wp-content/uploads/2022/06/KubernetesEdge-2022-report_FINAL.pdf)\n\n# What the Cloud Native advantage\n◆更高效、更稳定的资源调度与管理：\n    ➢ 一致的使用体验：依托已成事实标准的Kubernetes API，边缘与云上数据中心一致的使用体验，降低学习成本\n    ➢ 容器化应用交付：容器化的应用封装，屏蔽边缘复杂的底层硬件环境，应用交付更统一、更便捷\n    ➢ 细粒度的应用管理: 针对边缘资源有限的环境，云原生以微服务方式提供极其灵活的方式来开发和交付更细粒度\n的边缘服务，不需要更新整个单体应用\n    ➢ 更稳定的边缘应用管理能力：依托边缘自治等能力，服务可以稳定运行在边缘\n    ➢ 更快的故障恢复能力: 出现故障或存在错误的边缘应用可以迅速回滚，恢复到工作状态\n\n◆丰富的技术生态集成：\n➢ 基于CNCF庞大、丰富的云原生技术生态，轻松与生态集成，构建监控、日志等系统能力\n\n◆使用云原生路径也带来经济利益: \n➢ 云原生提供的带宽减少和流线型数据可以降低成本，使其成为一种非常有效的企业工具。 可以允许基于消费的边\n缘计算定价方法，而无需大量的前期资本支出\n\n# What is Edge calculation\n## 什么是云计算\n- 云计算是指通过互联网按需访问计算资源 - 应用、服务器（物理服务器和虚拟服务器）、数据存储、开发工具和网络功能等等，这些资源托管在由云服务提供商（或 CSP）管理的远程数据中心内。 CSP 提供这些资源时会按月收取订阅费用，或者按使用量收费\n\n## 什么是边缘计算\n- 1. 对于中心云，边缘就算靠近业务现场，提供一定的算力支持\n- 2. 边缘解决本地业务实时、安全、业务持续性的问题\n- 3. 边缘无处不在，远远大于云端的数量\n\n## 云边协同的经典应用场景\n- CDN结合边缘计算向下一代内容分发平台升级\nCDN结合边缘计算，将vCDN（virtual Content Delivery Network，虚拟内容分发网络）下沉到运营商的边缘数据中心，\n从而降低响应时延，可提升QoS指标，同时提高用户体验，降低眩晕感和延迟卡顿。\n- 新时代的万亿云游戏市场\n“快速切换，点开即玩”。新时代的云游戏利用云边协同快速扩张，游戏研发、硬件设备商、通信设备商、游戏平\n台将基于自身现有优势从不同角度切入，实现万亿云游戏市场的突破。\n- 云边协同是工业互联网的重要支柱\n在工业互联网场景中，边缘设备只能处理局部数据，无法形成全局认知，在实际应用中仍然需要借助云计算平台来实\n现信息的融合。因此，云边协同正逐渐成为支撑工业互联网发展的重要支柱。\n- 传统能源产业的智慧升级\n能源产业在传统模式下，需要大量的人力定期对数据进行收集和处理，一来人工成本非常高，二来数据分析效率低、\n时延大。因此，云边协同正为传统能源产业的智慧升级提供道路。\n- 加速数字中国在农业领域落地\n云边协同将推动农业供给端的变革，农业由经验主导向数据主导转变，通过智能化手段，可以将人的经验传递给机器，\n通过数据挖掘，可以发现新的生产规律和农业商品优化的新空间。\n家庭智能化信息服务成为可能\n- 云边协同使电器控制、安全保护、视频监控、定时控制、环境检测、场景控制、可视对讲等家庭智能化功能得以实\n现，同时使政务、医疗、教育等产业进一步丰富家庭智能化信息服务成为可能。\n- 智慧交通借助云边协同向车路协同方向发展\n车路协同是智慧交通的重要发展方向之一，能力构建涉及车内边缘计算、道路边缘计算、车路协同云等方面，云边\n协同可以从多方面提供车车、车路动态实时信息交互，并开展车辆主动安全控制和道路协同管理。\n- 云边协同引领安防智能化技术潮流\n现代安防监控可以和人工智能相结合，面向智能安防、视频监控、人脸识别等业务场景，以低时延、大带宽、快速\n响应等特性实现本地分析、快速处理、实时响应。\n- 云边协同重新定义医疗保健\n医疗保健是药师直接且负责任地提供的与药物治疗相关的服务，其目的是达到改善病人生命质量的确切效果，云边协同则从实时本地数据分析、数据断点续传、数据安全传输等方面让医生我患者提供更快、更高的护理\n~——中国信息通信研究院《云计算与边缘计算协同九大应用场景》~\n\n\n# What is KubeEdge\n- KubeEdge是一个开源系统，用于将容器化应用程序编排功能扩展到Edge的主机。它基于kubernetes构建，并为网络应用程序提供基础架构支持。云和边缘之间的部署和元数据同步\n- KubeEdge 是CNCF首个云原生边缘计算项目\n- KubeEdge Info：\n    - 官网：[https://kubeedge.io/en/](https://kubeedge.io/en/) \n    - GiteHub KubeEdge组织：[https://github.com/kubeedge](https://github.com/kubeedge)\n    - GitHub:[https://github.com/kubeedge/kubeedge](https://github.com/kubeedge/kubeedge)\n\n# KubeEdge Info\n## KubeEdge 消息介绍\n![20230211191153](https://cdn.jsdelivr.net/gh/Piwriw/PicGo/image/20230211191153.png)\n## KubeEdge 发展历程\n![20230211191305](https://cdn.jsdelivr.net/gh/Piwriw/PicGo/image/20230211191305.png)\n# 引用\n- 云原生边缘计算公开课\n- KubeEdge官网\n- 中国信息通信研究院《云计算与边缘计算协同九大应用场景》\n\n\n', '', 0, 14);
INSERT INTO `article` VALUES (595, '2023-02-28 17:46:08.483', NULL, NULL, ' Go语言之旅（一）：数据类型', 6, '\nGo语言之旅（一）：数据类型', '<h1><a id=\"Go_0\"></a>Go语言之旅（一）：数据类型</h1>\n<h2><a id=\"_2\"></a>常用命令</h2>\n<ul>\n<li><code>go build</code> : 进行编译</li>\n<li><code>go run</code> : 执行go代码</li>\n<li><code>go install</code> : 先编译得到可执行文件，把包添加到<code>GoPath/bin</code>目录下</li>\n</ul>\n<h2><a id=\"_8\"></a>跨平台编译流程</h2>\n<ul>\n<li>Linux : <code>CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build</code></li>\n<li>Windows : <code>CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build</code></li>\n</ul>\n<h2><a id=\"How_to_declare_the_type_13\"></a>How to declare the type(声明变量)</h2>\n<ul>\n<li>\n<p>采用 先声明 变量名称 变量数据类型</p>\n</li>\n<li>\n<p>一次可以声明多个同类型变量</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">var</span> a b c <span class=\"hljs-type\">int</span>\n</code></div></pre>\n</li>\n<li>\n<p>存在自身类型推断</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">var</span> str=<span class=\"hljs-string\">&quot;stringabc&quot;</span>\n</code></div></pre>\n</li>\n<li>\n<p>声明同时进行赋值，使用<code>:=</code></p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">var</span> intVal:=<span class=\"hljs-number\">1</span>\n<span class=\"hljs-comment\">/* 等价于 var intVal int\n *   intVal=1\n */</span>\n</code></div></pre>\n</li>\n</ul>\n<h3><a id=\"_38\"></a>一些注意点</h3>\n<ul>\n<li>函数外的每个语句必须以关键字开始（var、const、func等）</li>\n<li>:= 不能在函数外使用</li>\n<li>_ 多用于占位，标识值可以忽略</li>\n<li>Go语言采用静态编译，所有声明的变量都必须使用，不适用需要用_替代</li>\n</ul>\n<h2><a id=\"Go_const__iota_45\"></a>Go语言中的 const 和 iota</h2>\n<h3><a id=\"const_47\"></a>const部分</h3>\n<ul>\n<li>\n<p>const 定义常量</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">const r=<span class=\"hljs-number\">123456</span>\n</code></div></pre>\n</li>\n<li>\n<p>const 批量声明常量</p>\n</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-java\">const (\n    a=<span class=\"hljs-number\">100</span>\n    b=<span class=\"hljs-number\">200</span>\n    c=<span class=\"hljs-number\">300</span>\n)\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\">const (\n    <span class=\"hljs-comment\">//a=100 b=100 c=100</span>\n    a=<span class=\"hljs-number\">100</span>\n    b\n    c\n)\n</code></div></pre>\n<h3><a id=\"iot__74\"></a>iot 部分</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\">const (\n   b1 = iota <span class=\"hljs-comment\">//0</span>\n   b2        <span class=\"hljs-comment\">//1</span>\n   _         <span class=\"hljs-comment\">//2</span>\n   b3        <span class=\"hljs-comment\">//3</span>\n</code></div></pre>\n<h3><a id=\"Go_int_84\"></a>Go语言多种多样的 int</h3>\n<ul>\n<li>int类型的大小为 8 字节</li>\n<li>int8类型大小为 1 字节</li>\n<li>int16类型大小为 2 字节</li>\n<li>int32类型大小为 4 字节</li>\n<li>int64类型大小为 8 字节</li>\n<li><strong>其中int类型要重点说一下：go语言中的 int 的大小是和操作系统位数相关的，如果是32位操作系统，int 类型的大小就是4字节。如果是64位操作系统，int 类型的大小就是8个字节</strong></li>\n</ul>\n<h3><a id=\"Go_float_93\"></a>Go语言中的 float类型</h3>\n<ul>\n<li>float32</li>\n<li>float64</li>\n<li><strong>默认返回float64</strong></li>\n</ul>\n', '# Go语言之旅（一）：数据类型\n\n## 常用命令\n\n- `go build` : 进行编译\n- `go run` : 执行go代码\n- `go install` : 先编译得到可执行文件，把包添加到`GoPath/bin`目录下\n\n## 跨平台编译流程\n\n- Linux : `CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build`\n- Windows : `CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build`\n\n## How to declare the type(声明变量)\n\n- 采用 先声明 变量名称 变量数据类型\n\n- 一次可以声明多个同类型变量\n\n  ```java\n  var a b c int\n  ```\n\n- 存在自身类型推断\n\n  ```java\n  var str=\"stringabc\"\n  ```\n\n- 声明同时进行赋值，使用`:=`\n\n  ```java\n  var intVal:=1\n  /* 等价于 var intVal int\n   *   intVal=1\n   */\n  ```\n\n### 一些注意点\n\n- 函数外的每个语句必须以关键字开始（var、const、func等）\n- := 不能在函数外使用\n- _ 多用于占位，标识值可以忽略\n- Go语言采用静态编译，所有声明的变量都必须使用，不适用需要用_替代\n\n## Go语言中的 const 和 iota\n\n### const部分\n\n- const 定义常量\n\n  ```java\n  const r=123456\n  ```\n\n- const 批量声明常量\n\n```java\nconst (\n    a=100\n    b=200\n    c=300\n)\n```\n\n```java\nconst (\n    //a=100 b=100 c=100\n    a=100\n    b\n    c\n)\n```\n\n### iot 部分\n\n```java\nconst (\n   b1 = iota //0\n   b2        //1\n   _         //2\n   b3        //3\n```\n\n### Go语言多种多样的 int\n\n- int类型的大小为 8 字节\n- int8类型大小为 1 字节\n- int16类型大小为 2 字节\n- int32类型大小为 4 字节\n- int64类型大小为 8 字节\n- **其中int类型要重点说一下：go语言中的 int 的大小是和操作系统位数相关的，如果是32位操作系统，int 类型的大小就是4字节。如果是64位操作系统，int 类型的大小就是8个字节**\n\n### Go语言中的 float类型\n\n- float32\n- float64\n- **默认返回float64**\n-', '', 0, 13);
INSERT INTO `article` VALUES (596, '2023-02-28 17:46:47.875', NULL, '2023-03-01 18:20:31.337', ' Go语言之旅（二）切片', 6, '\nGo语言之旅（二）切片', '<h1><a id=\"Go_0\"></a>Go语言之旅（二）切片</h1>\n<h2><a id=\"_2\"></a>什么是切片</h2>\n<ul>\n<li>切片区别于数组，是引用类型， 不是值类型。数组是固定长度的，而切片长度是可变的，我的理解是：切片是对数组一个片段的引用。<strong>Java中没有切片，python有切片</strong></li>\n</ul>\n<h2><a id=\"_6\"></a>实战切片</h2>\n<ul>\n<li>\n<p>声明一个切片</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">var</span> s[] string\n<span class=\"hljs-keyword\">var</span> arr[] <span class=\"hljs-type\">int</span>\n<span class=\"hljs-comment\">// 这个时候 只做了声明 没有开辟空间 s=nil arr=nil</span>\n</code></div></pre>\n</li>\n<li>\n<p>定义切片并且做初始化</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">var</span> s=[] string {<span class=\"hljs-string\">&quot;a1&quot;</span>,<span class=\"hljs-string\">&quot;b2&quot;</span>,<span class=\"hljs-string\">&quot;c3&quot;</span>}\n<span class=\"hljs-keyword\">var</span> arr=[] <span class=\"hljs-type\">int</span> {<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>}\n</code></div></pre>\n</li>\n<li>\n<p>切片的长度和容量</p>\n<ul>\n<li>len()方法获取长度</li>\n<li>cap()方法获取容量</li>\n</ul>\n</li>\n<li>\n<p><strong>通过 make 生成切片</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">// 生成一个长度为 5 ，容量为 10 的整数切片</span>\ns:=make([]<span class=\"hljs-type\">int</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">10</span>)\n</code></div></pre>\n</li>\n<li>\n<p>切片的遍历</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">arr := make([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>)\narr = []<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>}\n\n<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; len(arr); i++ {\nfmt.Println(arr[i])\n}\n\n<span class=\"hljs-keyword\">for</span> i, v := range arr {\n  fmt.Println(i, v)\n}\n</code></div></pre>\n</li>\n<li>\n<p>切片添加元素</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">s = append(s, <span class=\"hljs-string\">&quot;唐山&quot;</span>) <span class=\"hljs-comment\">//切片append()追加之后，</span>\n<span class=\"hljs-comment\">// 这里有一个 容量扩容机制</span>\n<span class=\"hljs-comment\">//1. 如果当前所需容量 （cap） 大于原先容量的两倍 （doublecap），则最终申请容量（newcap）为当前所需容量（cap）；</span>\n\n<span class=\"hljs-comment\">//2. 如果&lt;条件1&gt;不满足，表示当前所需容量（cap）不大于原容量的两倍（doublecap），则进行如下判断；</span>\n\n<span class=\"hljs-comment\">//3. 如果原切片长度（old.len）小于1024，则最终申请容量（newcap）等于原容量的两倍（doublecap）；</span>\n\n<span class=\"hljs-comment\">//4. 否则，最终申请容量（newcap，初始值等于 old.cap）每次增加 newcap/4，直到大于所需容量（cap）为止，然后，判断最终申请容量（newcap）是否溢出，如果溢出，最终申请容量（newcap）等于所需容量（cap）；</span>\n</code></div></pre>\n</li>\n<li>\n<p>切片添加多个元素</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">s1 := []string{<span class=\"hljs-string\">&quot;北京&quot;</span>, <span class=\"hljs-string\">&quot;上海&quot;</span>, <span class=\"hljs-string\">&quot;大连&quot;</span>, <span class=\"hljs-string\">&quot;佛山&quot;</span>}\ns2 := []string{<span class=\"hljs-string\">&quot;太原&quot;</span>,<span class=\"hljs-string\">&quot;石家庄&quot;</span>}\n<span class=\"hljs-keyword\">var</span> s3 []<span class=\"hljs-type\">string</span>\n<span class=\"hljs-variable\">s3</span> <span class=\"hljs-operator\">=</span> append(s1,s2...) <span class=\"hljs-comment\">// ...表示拆开，将切片的值作为追加的元素</span>\n</code></div></pre>\n</li>\n<li>\n<p>切片的复制</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">//定义切片s1</span>\ns1 := []<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>}\n\n<span class=\"hljs-comment\">//第一种方式：直接声明变量 用=赋值</span>\n<span class=\"hljs-comment\">//s2切片和s1引用同一个内存地址</span>\n<span class=\"hljs-type\">var</span> <span class=\"hljs-variable\">s2</span> <span class=\"hljs-operator\">=</span> s1\n\n<span class=\"hljs-comment\">//第二种方式：copy</span>\n<span class=\"hljs-type\">var</span> <span class=\"hljs-variable\">s3</span> <span class=\"hljs-operator\">=</span> make([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-number\">3</span>)\ncopy(s3, s1)            <span class=\"hljs-comment\">//使用copy函数将 参数2的元素复制到参数1</span>\nfmt.Println(s1, s2, s3) <span class=\"hljs-comment\">//都是[1 2 3]</span>\n</code></div></pre>\n</li>\n</ul>\n<h2><a id=\"_89\"></a>切片与数组</h2>\n<ul>\n<li>\n<p>定义</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">  <span class=\"hljs-comment\">//定义一个数组</span>\n  a1 := [...]<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>}\n  s3 := a1[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">4</span>] <span class=\"hljs-comment\">//基于一个数组切割  [0:4]左包含 右不包含  即为[1,2,3,4]</span>\n  fmt.Println(s3)\n</code></div></pre>\n</li>\n<li>\n<p>切片的切割</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">a1 := [...]<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>}\ns4 := a1[<span class=\"hljs-number\">2</span>:<span class=\"hljs-number\">4</span>] <span class=\"hljs-comment\">//[3 4]</span>\ns5 := a1[:<span class=\"hljs-number\">4</span>] <span class=\"hljs-comment\">//[1 2 3 4]</span>\ns6 := a1[<span class=\"hljs-number\">2</span>:] <span class=\"hljs-comment\">//[3 4 5 6 7 8 9]</span>\ns7 := a1[:]  <span class=\"hljs-comment\">//[1 2 3 4 5 6 7 8 9]</span>\n</code></div></pre>\n</li>\n<li>\n<p>数组转化为切片</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">a1 := [...]<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>}\ns1 := a1[:]\n</code></div></pre>\n</li>\n</ul>\n<h2><a id=\"_117\"></a>总结</h2>\n<ul>\n<li>\n<ol>\n<li><strong>切片是引用类型，区别于数组的数值类型</strong></li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>切片是不定长的</li>\n</ol>\n</li>\n</ul>\n', '# Go语言之旅（二）切片\n\n## 什么是切片\n\n- 切片区别于数组，是引用类型， 不是值类型。数组是固定长度的，而切片长度是可变的，我的理解是：切片是对数组一个片段的引用。**Java中没有切片，python有切片**\n\n## 实战切片\n\n- 声明一个切片\n\n  ```java\n  var s[] string\n  var arr[] int\n  // 这个时候 只做了声明 没有开辟空间 s=nil arr=nil\n  ```\n\n- 定义切片并且做初始化\n\n  ```java\n  var s=[] string {\"a1\",\"b2\",\"c3\"}\n  var arr=[] int {1,2,3}\n  ```\n\n- 切片的长度和容量\n\n  - len()方法获取长度\n  - cap()方法获取容量\n\n- **通过 make 生成切片**\n\n  ```java\n  // 生成一个长度为 5 ，容量为 10 的整数切片\n  s:=make([]int,5,10)\n  ```\n\n- 切片的遍历\n\n  ```java\n  arr := make([]int, 3, 3)\n  arr = []int{1, 2, 3}\n  \n  for i := 0; i < len(arr); i++ {\n  fmt.Println(arr[i])\n  }\n  \n  for i, v := range arr {\n    fmt.Println(i, v)\n  }\n  ```\n\n- 切片添加元素\n\n  ```java\n  s = append(s, \"唐山\") //切片append()追加之后，\n  // 这里有一个 容量扩容机制\n  //1. 如果当前所需容量 （cap） 大于原先容量的两倍 （doublecap），则最终申请容量（newcap）为当前所需容量（cap）；\n  \n  //2. 如果<条件1>不满足，表示当前所需容量（cap）不大于原容量的两倍（doublecap），则进行如下判断；\n  \n  //3. 如果原切片长度（old.len）小于1024，则最终申请容量（newcap）等于原容量的两倍（doublecap）；\n  \n  //4. 否则，最终申请容量（newcap，初始值等于 old.cap）每次增加 newcap/4，直到大于所需容量（cap）为止，然后，判断最终申请容量（newcap）是否溢出，如果溢出，最终申请容量（newcap）等于所需容量（cap）；\n  ```\n\n- 切片添加多个元素\n\n  ```java\n  s1 := []string{\"北京\", \"上海\", \"大连\", \"佛山\"}\n  s2 := []string{\"太原\",\"石家庄\"}\n  var s3 []string\n  s3 = append(s1,s2...) // ...表示拆开，将切片的值作为追加的元素\n  ```\n\n- 切片的复制\n\n  ```java\n  //定义切片s1\n  s1 := []int{1, 2, 3}\n  \n  //第一种方式：直接声明变量 用=赋值\n  //s2切片和s1引用同一个内存地址\n  var s2 = s1\n  \n  //第二种方式：copy\n  var s3 = make([]int, 3)\n  copy(s3, s1)            //使用copy函数将 参数2的元素复制到参数1\n  fmt.Println(s1, s2, s3) //都是[1 2 3]\n  ```\n\n## 切片与数组\n\n- 定义\n\n  ```java\n    //定义一个数组\n    a1 := [...]int{1, 2, 3, 4, 5, 6, 7, 8, 9}\n    s3 := a1[0:4] //基于一个数组切割  [0:4]左包含 右不包含  即为[1,2,3,4]\n    fmt.Println(s3)\n  ```\n\n- 切片的切割\n\n  ```java\n  a1 := [...]int{1, 2, 3, 4, 5, 6, 7, 8, 9}\n  s4 := a1[2:4] //[3 4]\n  s5 := a1[:4] //[1 2 3 4]\n  s6 := a1[2:] //[3 4 5 6 7 8 9]\n  s7 := a1[:]  //[1 2 3 4 5 6 7 8 9]\n  ```\n\n- 数组转化为切片\n\n  ```java\n  a1 := [...]int{1,2,3}\n  s1 := a1[:]\n  ```\n\n## 总结\n\n- 1. **切片是引用类型，区别于数组的数值类型**\n- 2. 切片是不定长的\n\n', '', 0, 12);
INSERT INTO `article` VALUES (597, '2023-02-28 17:48:19.668', NULL, '2023-03-01 18:17:20.144', ' why I write the series of kubeedge', 7, '\nwhy I write the series of kubeedge', '<h1><a id=\"why_I_write_the_series_of_kubeedge_0\"></a>why I write the series of kubeedge</h1>\n<ul>\n<li>It base on an experience I had studying kubeege. What is more,I chose it as my graduation project.(ps： somethings from Kubeedge 云原生边缘计算公开课) When I stumbled upon this series of courses.</li>\n<li>Now let get it!</li>\n</ul>\n<h1><a id=\"Backgroud_of_Edge_calculation_5\"></a>Backgroud of Edge calculation</h1>\n<ul>\n<li>Famous words:&quot; <strong>The future is here and it is built on cloud native</strong> &quot; (未来就在这里，它建立在云原生之上)</li>\n<li>Edge Computing will be 4x larger than cloud and will generate 75% of data worldwide by 2025. With hardware and<br />\nsoftware spread across hundreds or thousands of locations, the only feasible way to manage these distributed systems<br />\nare the simple paradigms around observability, loosely coupled systems, declarative APIs, and robust automation, that have made cloud native technologies so successful in the cloud. Kubernetes is already becoming a key part of the edge ecosystem, driving integrations and operations</li>\n<li>到2025年，全世界75%的数据将会产生于边缘，边缘计算的规模将会比云大4倍。由于软硬件分散部署在成百上千的 不同位置上，管理这些分布式系统的唯一可行的方法是围绕可观测性、松耦合系统、声明式API和强大的自动化的简单范式，这些范式已经在云计算中促使云原生技术获得成功。Kubernetes已经成为边缘生态系统的关键部分，持续推动其集成和运维 --from <a href=\"https://www.cncf.io/wp-content/uploads/2022/06/KubernetesEdge-2022-report_FINAL.pdf\" target=\"_blank\">Reported from Kubernetes on EDGE DAY</a></li>\n</ul>\n<h1><a id=\"What_the_Cloud_Native_advantage_13\"></a>What the Cloud Native advantage</h1>\n<p>◆更高效、更稳定的资源调度与管理：<br />\n➢ 一致的使用体验：依托已成事实标准的Kubernetes API，边缘与云上数据中心一致的使用体验，降低学习成本<br />\n➢ 容器化应用交付：容器化的应用封装，屏蔽边缘复杂的底层硬件环境，应用交付更统一、更便捷<br />\n➢ 细粒度的应用管理: 针对边缘资源有限的环境，云原生以微服务方式提供极其灵活的方式来开发和交付更细粒度<br />\n的边缘服务，不需要更新整个单体应用<br />\n➢ 更稳定的边缘应用管理能力：依托边缘自治等能力，服务可以稳定运行在边缘<br />\n➢ 更快的故障恢复能力: 出现故障或存在错误的边缘应用可以迅速回滚，恢复到工作状态</p>\n<p>◆丰富的技术生态集成：<br />\n➢ 基于CNCF庞大、丰富的云原生技术生态，轻松与生态集成，构建监控、日志等系统能力</p>\n<p>◆使用云原生路径也带来经济利益:<br />\n➢ 云原生提供的带宽减少和流线型数据可以降低成本，使其成为一种非常有效的企业工具。 可以允许基于消费的边<br />\n缘计算定价方法，而无需大量的前期资本支出</p>\n<h1><a id=\"What_is_Edge_calculation_30\"></a>What is Edge calculation</h1>\n<h2><a id=\"_32\"></a>什么是云计算</h2>\n<ul>\n<li>云计算是指通过互联网按需访问计算资源 - 应用、服务器（物理服务器和虚拟服务器）、数据存储、开发工具和网络功能等等，这些资源托管在由云服务提供商（或 CSP）管理的远程数据中心内。 CSP 提供这些资源时会按月收取订阅费用，或者按使用量收费</li>\n</ul>\n<h2><a id=\"_36\"></a>什么是边缘计算</h2>\n<ul>\n<li>\n<ol>\n<li>对于中心云，边缘就算靠近业务现场，提供一定的算力支持</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>边缘解决本地业务实时、安全、业务持续性的问题</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>边缘无处不在，远远大于云端的数量</li>\n</ol>\n</li>\n</ul>\n<h2><a id=\"_42\"></a>云边协同的经典应用场景</h2>\n<ul>\n<li>CDN结合边缘计算向下一代内容分发平台升级<br />\nCDN结合边缘计算，将vCDN（virtual Content Delivery Network，虚拟内容分发网络）下沉到运营商的边缘数据中心，<br />\n从而降低响应时延，可提升QoS指标，同时提高用户体验，降低眩晕感和延迟卡顿。</li>\n<li>新时代的万亿云游戏市场<br />\n“快速切换，点开即玩”。新时代的云游戏利用云边协同快速扩张，游戏研发、硬件设备商、通信设备商、游戏平<br />\n台将基于自身现有优势从不同角度切入，实现万亿云游戏市场的突破。</li>\n<li>云边协同是工业互联网的重要支柱<br />\n在工业互联网场景中，边缘设备只能处理局部数据，无法形成全局认知，在实际应用中仍然需要借助云计算平台来实<br />\n现信息的融合。因此，云边协同正逐渐成为支撑工业互联网发展的重要支柱。</li>\n<li>传统能源产业的智慧升级<br />\n能源产业在传统模式下，需要大量的人力定期对数据进行收集和处理，一来人工成本非常高，二来数据分析效率低、<br />\n时延大。因此，云边协同正为传统能源产业的智慧升级提供道路。</li>\n<li>加速数字中国在农业领域落地<br />\n云边协同将推动农业供给端的变革，农业由经验主导向数据主导转变，通过智能化手段，可以将人的经验传递给机器，<br />\n通过数据挖掘，可以发现新的生产规律和农业商品优化的新空间。<br />\n家庭智能化信息服务成为可能</li>\n<li>云边协同使电器控制、安全保护、视频监控、定时控制、环境检测、场景控制、可视对讲等家庭智能化功能得以实<br />\n现，同时使政务、医疗、教育等产业进一步丰富家庭智能化信息服务成为可能。</li>\n<li>智慧交通借助云边协同向车路协同方向发展<br />\n车路协同是智慧交通的重要发展方向之一，能力构建涉及车内边缘计算、道路边缘计算、车路协同云等方面，云边<br />\n协同可以从多方面提供车车、车路动态实时信息交互，并开展车辆主动安全控制和道路协同管理。</li>\n<li>云边协同引领安防智能化技术潮流<br />\n现代安防监控可以和人工智能相结合，面向智能安防、视频监控、人脸识别等业务场景，以低时延、大带宽、快速<br />\n响应等特性实现本地分析、快速处理、实时响应。</li>\n<li>云边协同重新定义医疗保健<br />\n医疗保健是药师直接且负责任地提供的与药物治疗相关的服务，其目的是达到改善病人生命质量的确切效果，云边协同则从实时本地数据分析、数据断点续传、数据安全传输等方面让医生我患者提供更快、更高的护理<br />\n<sub>——中国信息通信研究院《云计算与边缘计算协同九大应用场景》</sub></li>\n</ul>\n<h1><a id=\"What_is_KubeEdge_73\"></a>What is KubeEdge</h1>\n<ul>\n<li>KubeEdge是一个开源系统，用于将容器化应用程序编排功能扩展到Edge的主机。它基于kubernetes构建，并为网络应用程序提供基础架构支持。云和边缘之间的部署和元数据同步</li>\n<li>KubeEdge 是CNCF首个云原生边缘计算项目</li>\n<li>KubeEdge Info：\n<ul>\n<li>官网：<a href=\"https://kubeedge.io/en/\" target=\"_blank\">https://kubeedge.io/en/</a></li>\n<li>GiteHub KubeEdge组织：<a href=\"https://github.com/kubeedge\" target=\"_blank\">https://github.com/kubeedge</a></li>\n<li>GitHub:<a href=\"https://github.com/kubeedge/kubeedge\" target=\"_blank\">https://github.com/kubeedge/kubeedge</a></li>\n</ul>\n</li>\n</ul>\n<h1><a id=\"KubeEdge_Info_82\"></a>KubeEdge Info</h1>\n<h2><a id=\"KubeEdge__84\"></a>KubeEdge 消息介绍</h2>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Piwriw/PicGo/image/20230211191153.png\" alt=\"20230211191153\" /></p>\n<h2><a id=\"KubeEdge__88\"></a>KubeEdge 发展历程</h2>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Piwriw/PicGo/image/20230211191305.png\" alt=\"20230211191305\" /></p>\n<h1><a id=\"_92\"></a>引用</h1>\n<ul>\n<li>云原生边缘计算公开课</li>\n<li>KubeEdge官网</li>\n<li>中国信息通信研究院《云计算与边缘计算协同九大应用场景》</li>\n</ul>\n', '# why I write the series of kubeedge\n\n- It base on an experience I had studying kubeege. What is more,I chose it as my graduation project.(ps： somethings from Kubeedge 云原生边缘计算公开课) When I stumbled upon this series of courses.\n- Now let get it!\n\n# Backgroud of Edge calculation\n\n- Famous words:\" **The future is here and it is built on cloud native** \" (未来就在这里，它建立在云原生之上)\n- Edge Computing will be 4x larger than cloud and will generate 75% of data worldwide by 2025. With hardware and \n  software spread across hundreds or thousands of locations, the only feasible way to manage these distributed systems \n  are the simple paradigms around observability, loosely coupled systems, declarative APIs, and robust automation, that have made cloud native technologies so successful in the cloud. Kubernetes is already becoming a key part of the edge ecosystem, driving integrations and operations\n- 到2025年，全世界75%的数据将会产生于边缘，边缘计算的规模将会比云大4倍。由于软硬件分散部署在成百上千的 不同位置上，管理这些分布式系统的唯一可行的方法是围绕可观测性、松耦合系统、声明式API和强大的自动化的简单范式，这些范式已经在云计算中促使云原生技术获得成功。Kubernetes已经成为边缘生态系统的关键部分，持续推动其集成和运维 --from [Reported from Kubernetes on EDGE DAY](https://www.cncf.io/wp-content/uploads/2022/06/KubernetesEdge-2022-report_FINAL.pdf)\n\n# What the Cloud Native advantage\n\n◆更高效、更稳定的资源调度与管理：\n    ➢ 一致的使用体验：依托已成事实标准的Kubernetes API，边缘与云上数据中心一致的使用体验，降低学习成本\n    ➢ 容器化应用交付：容器化的应用封装，屏蔽边缘复杂的底层硬件环境，应用交付更统一、更便捷\n    ➢ 细粒度的应用管理: 针对边缘资源有限的环境，云原生以微服务方式提供极其灵活的方式来开发和交付更细粒度\n的边缘服务，不需要更新整个单体应用\n    ➢ 更稳定的边缘应用管理能力：依托边缘自治等能力，服务可以稳定运行在边缘\n    ➢ 更快的故障恢复能力: 出现故障或存在错误的边缘应用可以迅速回滚，恢复到工作状态\n\n◆丰富的技术生态集成：\n➢ 基于CNCF庞大、丰富的云原生技术生态，轻松与生态集成，构建监控、日志等系统能力\n\n◆使用云原生路径也带来经济利益: \n➢ 云原生提供的带宽减少和流线型数据可以降低成本，使其成为一种非常有效的企业工具。 可以允许基于消费的边\n缘计算定价方法，而无需大量的前期资本支出\n\n# What is Edge calculation\n\n## 什么是云计算\n\n- 云计算是指通过互联网按需访问计算资源 - 应用、服务器（物理服务器和虚拟服务器）、数据存储、开发工具和网络功能等等，这些资源托管在由云服务提供商（或 CSP）管理的远程数据中心内。 CSP 提供这些资源时会按月收取订阅费用，或者按使用量收费\n\n## 什么是边缘计算\n\n- 1. 对于中心云，边缘就算靠近业务现场，提供一定的算力支持\n- 2. 边缘解决本地业务实时、安全、业务持续性的问题\n- 3. 边缘无处不在，远远大于云端的数量\n\n## 云边协同的经典应用场景\n\n- CDN结合边缘计算向下一代内容分发平台升级\n  CDN结合边缘计算，将vCDN（virtual Content Delivery Network，虚拟内容分发网络）下沉到运营商的边缘数据中心，\n  从而降低响应时延，可提升QoS指标，同时提高用户体验，降低眩晕感和延迟卡顿。\n- 新时代的万亿云游戏市场\n  “快速切换，点开即玩”。新时代的云游戏利用云边协同快速扩张，游戏研发、硬件设备商、通信设备商、游戏平\n  台将基于自身现有优势从不同角度切入，实现万亿云游戏市场的突破。\n- 云边协同是工业互联网的重要支柱\n  在工业互联网场景中，边缘设备只能处理局部数据，无法形成全局认知，在实际应用中仍然需要借助云计算平台来实\n  现信息的融合。因此，云边协同正逐渐成为支撑工业互联网发展的重要支柱。\n- 传统能源产业的智慧升级\n  能源产业在传统模式下，需要大量的人力定期对数据进行收集和处理，一来人工成本非常高，二来数据分析效率低、\n  时延大。因此，云边协同正为传统能源产业的智慧升级提供道路。\n- 加速数字中国在农业领域落地\n  云边协同将推动农业供给端的变革，农业由经验主导向数据主导转变，通过智能化手段，可以将人的经验传递给机器，\n  通过数据挖掘，可以发现新的生产规律和农业商品优化的新空间。\n  家庭智能化信息服务成为可能\n- 云边协同使电器控制、安全保护、视频监控、定时控制、环境检测、场景控制、可视对讲等家庭智能化功能得以实\n  现，同时使政务、医疗、教育等产业进一步丰富家庭智能化信息服务成为可能。\n- 智慧交通借助云边协同向车路协同方向发展\n  车路协同是智慧交通的重要发展方向之一，能力构建涉及车内边缘计算、道路边缘计算、车路协同云等方面，云边\n  协同可以从多方面提供车车、车路动态实时信息交互，并开展车辆主动安全控制和道路协同管理。\n- 云边协同引领安防智能化技术潮流\n  现代安防监控可以和人工智能相结合，面向智能安防、视频监控、人脸识别等业务场景，以低时延、大带宽、快速\n  响应等特性实现本地分析、快速处理、实时响应。\n- 云边协同重新定义医疗保健\n  医疗保健是药师直接且负责任地提供的与药物治疗相关的服务，其目的是达到改善病人生命质量的确切效果，云边协同则从实时本地数据分析、数据断点续传、数据安全传输等方面让医生我患者提供更快、更高的护理\n  ~——中国信息通信研究院《云计算与边缘计算协同九大应用场景》~\n\n\n# What is KubeEdge\n\n- KubeEdge是一个开源系统，用于将容器化应用程序编排功能扩展到Edge的主机。它基于kubernetes构建，并为网络应用程序提供基础架构支持。云和边缘之间的部署和元数据同步\n- KubeEdge 是CNCF首个云原生边缘计算项目\n- KubeEdge Info：\n  - 官网：[https://kubeedge.io/en/](https://kubeedge.io/en/) \n  - GiteHub KubeEdge组织：[https://github.com/kubeedge](https://github.com/kubeedge)\n  - GitHub:[https://github.com/kubeedge/kubeedge](https://github.com/kubeedge/kubeedge)\n\n# KubeEdge Info\n\n## KubeEdge 消息介绍\n\n![20230211191153](https://cdn.jsdelivr.net/gh/Piwriw/PicGo/image/20230211191153.png)\n\n## KubeEdge 发展历程\n\n![20230211191305](https://cdn.jsdelivr.net/gh/Piwriw/PicGo/image/20230211191305.png)\n\n# 引用\n\n- 云原生边缘计算公开课\n- KubeEdge官网\n- 中国信息通信研究院《云计算与边缘计算协同九大应用场景》\n\n', '', 0, 12);

-- ----------------------------
-- Table structure for category
-- ----------------------------
DROP TABLE IF EXISTS `category`;
CREATE TABLE `category`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `create_time` datetime(3) NULL DEFAULT NULL,
  `update_time` datetime(3) NULL DEFAULT NULL,
  `delete_time` datetime(3) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 8 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of category
-- ----------------------------
INSERT INTO `category` VALUES (1, 'test', '2023-02-26 19:36:32.000', NULL, NULL);
INSERT INTO `category` VALUES (6, 'Golang', '2023-02-28 17:45:16.268', NULL, NULL);
INSERT INTO `category` VALUES (7, 'kubeedge', '2023-02-28 17:47:50.851', NULL, NULL);

-- ----------------------------
-- Table structure for comment
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `create_time` datetime(3) NULL DEFAULT NULL,
  `update_time` datetime(3) NULL DEFAULT NULL,
  `delete_time` datetime(3) NULL DEFAULT NULL,
  `user_id` bigint(20) UNSIGNED NULL DEFAULT NULL,
  `article_id` bigint(20) UNSIGNED NULL DEFAULT NULL,
  `content` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `status` tinyint(4) NULL DEFAULT 2 COMMENT '0  不显示\r\n1 显示',
  `article_title` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `username` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `title` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_comment_deleted_at`(`delete_time`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 17 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of comment
-- ----------------------------
INSERT INTO `comment` VALUES (1, '2021-01-04 22:47:58.000', '2021-01-04 22:48:24.617', NULL, 1, 1, '测试测试~~~', 1, NULL, 'admin', '');
INSERT INTO `comment` VALUES (2, '2021-01-04 22:49:04.785', '2021-01-04 22:49:12.046', NULL, 2, 1, '测试测试', 1, NULL, 'weject', '');
INSERT INTO `comment` VALUES (14, '2023-02-28 17:26:25.355', NULL, NULL, 11, 1, 'Piwriw', 1, NULL, 'piwriw', NULL);
INSERT INTO `comment` VALUES (15, '2023-02-28 17:26:29.708', NULL, NULL, 11, 1, '111', 1, NULL, 'piwriw', NULL);
INSERT INTO `comment` VALUES (16, '2023-02-28 19:32:15.703', NULL, NULL, 11, 1, 'ninhao', 0, NULL, 'piwriw', NULL);

-- ----------------------------
-- Table structure for profile
-- ----------------------------
DROP TABLE IF EXISTS `profile`;
CREATE TABLE `profile`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `desc` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `qqchat` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `wechat` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `weibo` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `bili` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `email` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `img` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `avatar` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `github` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `gitee` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `public_account` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 574 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of profile
-- ----------------------------
INSERT INTO `profile` VALUES (1, 'piwriw', '该知道得都知道', '123456', 'wx', '微博地址', 'B站地址', '1062740129@qq.com', 'http://test.scjglaw.cn/FsdR3jZStpoxJ1652sFmNMtwqiFY', 'http://test.scjglaw.cn/Fm63wdxiVmW7xN3z2R-czYUdMmLY', 'https://github.com/piwriw', 'https://gitee.com/piwriw', '今晚必早睡');

-- ----------------------------
-- Table structure for user
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `create_time` datetime(2) NULL DEFAULT NULL,
  `update_time` datetime(2) NULL DEFAULT NULL,
  `delete_time` datetime(2) NULL DEFAULT NULL,
  `username` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `password` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `email` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `role` bigint(20) NULL DEFAULT 2,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_user_deleted_at`(`delete_time`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 14 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES (1, '2021-02-19 17:05:14.00', '2021-02-09 17:05:14.76', NULL, 'admin', '$2a$10$YGL5a9z7ykG6BWOo.XhJU.h8r98BD5IvAmLISBB9rFIefbDzrv58O', NULL, 1);
INSERT INTO `user` VALUES (11, '2023-02-27 16:33:34.07', NULL, NULL, 'piwriw', '313233343536848f404cf042638ed532f055ebed5157', NULL, 1);
INSERT INTO `user` VALUES (12, '2023-02-28 20:01:15.74', NULL, NULL, 'leadzhang', '313233343536848f404cf042638ed532f055ebed5157', NULL, 2);
INSERT INTO `user` VALUES (13, '2023-02-28 20:06:41.34', NULL, NULL, 'leadzhang2', '313233343536848f404cf042638ed532f055ebed5157', '', 2);

SET FOREIGN_KEY_CHECKS = 1;
